# forward proxy: client-side proxy (or proxy). client --> forward proxy --> internet --> web backend server.
# reverse proxy: server-side proxy. client --> internet --> reverse proxy --> web backend server.
# This is a reverse proxy.

user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 'events' block is used to configure settings related to event handling, such as network connections and asynchronous I/O operations.
events {
    worker_connections 1024; # 'worker_connections' directive specifies the maximum number of simultaneous connections that a single worker process can handle. Each incoming connection, whether it's a client request or a response to a client request, consumes a worker connection.
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on; # The sendfile directive enables the use of the operating system's sendfile mechanism to efficiently transmit files to clients. This can improve the performance of serving static files, as it allows Nginx to offload the file transmission to the kernel.

    # tcp_nopush on; # The tcp_nopush directive controls whether Nginx should use the TCP_CORK option to attempt to reduce the number of small packets sent to the client in cases where multiple small packets could be combined into a single packet. This can be beneficial for performance optimization, especially for serving large files.

    keepalive_timeout 65; # The keepalive_timeout directive defines the maximum amount of time in seconds that an idle client connection will be kept open. If a client makes a request and the response is sent within this timeout period, the connection will be kept open for potential additional requests. This is particularly useful to reduce the overhead of establishing new connections for each request.

    # gzip on; # The gzip directive enables response compression using the gzip compression algorithm. When this directive is enabled, Nginx will compress responses before sending them to clients that support gzip compression. This can significantly reduce the amount of data transferred over the network, improving loading times for clients with limited bandwidth.

    # Server blocks (virtual hosts) are defined inside the http context.
    server {
        # Server configuration for the first virtual host.
        # - web browser sets 'Host' header for every request.
        # - server_name: 'Host' header of the request coming to the nginx server.
        # - server_name examples: localhost, 127.0.0.1, www.example.com, etc.

        listen 3000 default_server; # 'default_server' parameter will handle any requests that do not match any other server blocks. This is often referred to as a catch-all server block.

        server_name _; # In this case, you set the server_name directive to '_', which is a wildcard that matches any domain name. This block will be used when the Host header in the incoming request does not match any specific server name.

        # access_log /var/log/nginx/host.access.log main;

        root /developer/projects/frontend/build;

        index index.html;

        location ~ ^/fibonacci/(.*) {
            try_files /$1 /$1/ /index.html =404;
        }
    }
}
